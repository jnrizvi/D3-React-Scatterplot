{"version":3,"sources":["D3Chart.js","ChartWrapper.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["MARGIN","WIDTH","HEIGHT","D3Chart","element","data","updateName","vis","this","g","d3","append","attr","x","range","y","xAxisGroup","yAxisGroup","text","update","domain","d","Number","age","height","xAxisCall","yAxisCall","transition","duration","call","circles","selectAll","name","exit","remove","enter","on","ChartWrapper","setState","chart","refs","props","nextProps","state","className","ref","React","Component","Table","handleSubmit","updateData","hieght","handleChange","event","target","value","handleRemove","newData","filter","map","student","background","activeName","Row","key","style","marginTop","backgroundColor","Col","xs","Button","variant","type","width","onClick","Form","Control","placeholder","onChange","renderRows","App","length","Navbar","bg","Brand","Container","md","renderChart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAEMA,EAAgB,GAAhBA,EAA4B,GAA5BA,EAAsC,GAAtCA,EAAiD,GACjDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EA2FnBG,E,WAxFb,WAAYC,EAASC,EAAMC,GAAa,oBAEtC,IAAIC,EAAMC,KACVD,EAAID,WAAaA,EAGjBC,EAAIE,EAAIC,IAAUN,GACfO,OAAO,OACLC,KAAK,QAASX,EAAQD,EAAcA,GACpCY,KAAK,SAAUV,EAASF,EAAaA,GACvCW,OAAO,KACLC,KAAK,YALF,oBAK4BZ,EAL5B,aAK4CA,EAL5C,MASRO,EAAIM,EAAIH,MACLI,MAAM,CAAC,EAAGb,IAEbM,EAAIQ,EAAIL,MACLI,MAAM,CAACZ,EAAQ,IAIlBK,EAAIS,WAAaT,EAAIE,EAAEE,OAAO,KAC3BC,KAAK,YADS,uBACoBV,EADpB,MAEjBK,EAAIU,WAAaV,EAAIE,EAAEE,OAAO,KAI9BJ,EAAIE,EAAEE,OAAO,QACVC,KAAK,IAAKX,EAAQ,GAClBW,KAAK,IAAKV,EAAS,IACnBU,KAAK,YAAa,IAClBA,KAAK,cAAe,UACpBM,KAAK,OAERX,EAAIE,EAAEE,OAAO,QACVC,KAAK,KAAOV,EAAS,GACrBU,KAAK,KAAM,IACXA,KAAK,YAAa,eAClBA,KAAK,YAAa,IAClBA,KAAK,cAAe,UACpBM,KAAK,gBAGRX,EAAIY,OAAOd,G,mDAENA,GACL,IAAIE,EAAMC,KACVD,EAAIF,KAAOA,EAEXE,EAAIM,EAAEO,OAAO,CAAC,EAAGV,IAAOH,EAAIF,MAAM,SAAAgB,GAAC,OAAIC,OAAOD,EAAEE,UAChDhB,EAAIQ,EAAEK,OAAO,CAAC,EAAGV,IAAOH,EAAIF,MAAM,SAAAgB,GAAC,OAAIC,OAAOD,EAAEG,aAEhD,IAAMC,EAAYf,IAAcH,EAAIM,GAC9Ba,EAAYhB,IAAYH,EAAIQ,GAElCR,EAAIS,WAAWW,aAAaC,SAAS,KAAKC,KAAKJ,GAC/ClB,EAAIU,WAAWU,aAAaC,SAAS,KAAKC,KAAKH,GAI/C,IAAMI,EAAUvB,EAAIE,EAAEsB,UAAU,UAC7B1B,KAAKE,EAAIF,MAAM,SAAAgB,GAAC,OAAIA,EAAEW,QAGzBF,EAAQG,OACLN,aAAaC,SAAS,KACpBhB,KAAK,KAAML,EAAIQ,EAAE,IACjBmB,SAGLJ,EAAQH,aAAaC,SAAS,KAC3BhB,KAAK,MAAM,SAAAS,GAAC,OAAId,EAAIM,EAAEQ,EAAEE,QACxBX,KAAK,MAAM,SAAAS,GAAC,OAAId,EAAIQ,EAAEM,EAAEG,WAG3BM,EAAQK,QAAQxB,OAAO,UACpBC,KAAK,KAAML,EAAIQ,EAAE,IACjBH,KAAK,MAAM,SAAAS,GAAC,OAAId,EAAIM,EAAEQ,EAAEE,QACxBX,KAAK,IAAK,GACVA,KAAK,OAAQ,QACbwB,GAAG,SAAS,SAAAf,GAAC,OAAId,EAAID,WAAWe,EAAEW,SAClCL,aAAaC,SAAS,KACpBhB,KAAK,MAAM,SAAAS,GAAC,OAAId,EAAIQ,EAAEM,EAAEG,e,KC5DlBa,E,4LAtBX7B,KAAK8B,SAAS,CACZC,MAAO,IAAIpC,EAAQK,KAAKgC,KAAKD,MAAO/B,KAAKiC,MAAMpC,KAAMG,KAAKiC,MAAMnC,gB,8CAOlE,OAAO,I,gDAIiBoC,GACxBlC,KAAKmC,MAAMJ,MAAMpB,OAAOuB,EAAUrC,Q,+BAKlC,OAAO,yBAAKuC,UAAU,aAAaC,IAAI,c,GAvBhBC,IAAMC,W,gCCwElBC,E,2MArEbL,MAAQ,CACNX,KAAM,GACNR,OAAQ,GACRD,IAAK,I,EAGP0B,aAAe,WACb,EAAKR,MAAMS,WAAX,sBAA0B,EAAKT,MAAMpC,MAArC,CAA2C,EAAKsC,SAChD,EAAKL,SAAS,CAAEN,KAAM,GAAImB,OAAQ,GAAI5B,IAAK,M,EAG7C6B,aAAe,SAACC,GAEd,EAAKf,SAAL,eAAiBe,EAAMC,OAAOtB,KAAOqB,EAAMC,OAAOC,S,EAGpDC,aAAe,SAACH,GACd,IAAMI,EAAU,EAAKhB,MAAMpC,KAAKqD,QAAO,SAAArC,GACrC,OAAOA,EAAEW,OAASqB,EAAMC,OAAOtB,QAEjC,EAAKS,MAAMS,WAAWO,I,4EAGV,IAAD,OACX,OACEjD,KAAKiC,MAAMpC,KAAKsD,KAAI,SAAAC,GAClB,IAAMC,EAAaD,EAAQ5B,OAAS,EAAKS,MAAMqB,WAAa,OAAS,QACrE,OACE,kBAACC,EAAA,EAAD,CAAKC,IAAKJ,EAAQ5B,KAAMiC,MAAO,CAAEC,UAAW,OAAQC,gBAAiBN,IACnE,kBAACO,EAAA,EAAD,CAAKC,GAAI,GAAIT,EAAQ5B,MACrB,kBAACoC,EAAA,EAAD,CAAKC,GAAI,GAAIT,EAAQpC,QACrB,kBAAC4C,EAAA,EAAD,CAAKC,GAAI,GAAIT,EAAQrC,KACrB,kBAAC6C,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAQC,QAAS,SAAUC,KAAM,SAAUP,MAAO,CAAEQ,MAAO,QAAUzC,KAAM4B,EAAQ5B,KAAM0C,QAAS,EAAKlB,cAAvG,iB,+BAWV,OACE,6BACE,kBAACO,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACM,EAAA,EAAKC,QAAN,CAAcC,YAAa,OAAQ7C,KAAM,OAAQuB,MAAO/C,KAAKmC,MAAMX,KAAM8C,SAAUtE,KAAK4C,gBAE1F,kBAACgB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACM,EAAA,EAAKC,QAAN,CAAcC,YAAa,SAAU7C,KAAM,SAAUuB,MAAO/C,KAAKmC,MAAMnB,OAAQsD,SAAUtE,KAAK4C,gBAEhG,kBAACgB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACM,EAAA,EAAKC,QAAN,CAAcC,YAAa,MAAO7C,KAAM,MAAOuB,MAAO/C,KAAKmC,MAAMpB,IAAKuD,SAAUtE,KAAK4C,gBAGvF,kBAACgB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQC,QAAS,UAAWC,KAAM,SAAUP,MAAO,CAAEQ,MAAO,QAAUC,QAASlE,KAAKyC,cAApF,SAKHzC,KAAKuE,kB,GAhEMjC,IAAMC,WCmDXiC,E,2MA/CbrC,MAAQ,CACNtC,KAAM,GACNyD,WAAY,M,EAadxD,WAAa,SAACwD,GACZ,EAAKxB,SAAS,CAAEwB,WAAYA,K,EAG9BZ,WAAa,SAAC7C,GACZ,EAAKiC,SAAS,CAAEjC,KAAMA,K,oFAdtBG,KAAK8B,SAAS,CAACjC,KAAM,CACjB,CAAC,IAAM,KAAK,OAAS,MAAM,KAAO,QAClC,CAAC,IAAM,KAAK,OAAS,MAAM,KAAO,WAClC,CAAC,IAAM,IAAI,OAAS,MAAM,KAAO,UACjC,CAAC,IAAM,KAAK,OAAS,MAAM,KAAO,SAClC,CAAC,IAAM,KAAK,OAAS,MAAM,KAAO,gB,oCAatC,OAA+B,IAA3BG,KAAKmC,MAAMtC,KAAK4E,OACX,cAEF,kBAAC,EAAD,CAAc5E,KAAMG,KAAKmC,MAAMtC,KAAMC,WAAYE,KAAKF,e,+BAI7D,OACE,yBAAKsC,UAAU,OACb,kBAACsC,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOE,MAAR,oCAEF,kBAACC,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CAAKkB,GAAI,EAAGjB,GAAI,IAAK7D,KAAK+E,eAC1B,kBAACnB,EAAA,EAAD,CAAKkB,GAAI,EAAGjB,GAAI,IAAI,kBAAC,EAAD,CAAOhE,KAAMG,KAAKmC,MAAMtC,KAAM6C,WAAY1C,KAAK0C,WAAYY,WAAYtD,KAAKmC,MAAMmB,qB,GAxChGhB,IAAMC,WCGJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72899f03.chunk.js","sourcesContent":["import * as d3 from \"d3\";\n\nconst MARGIN = { TOP: 10, BOTTOM: 80, LEFT: 70, RIGHT: 10 };\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data, updateName) {\n    // vis refers to a particular instance of this D3Chart object\n    let vis = this;\n    vis.updateName = updateName;\n    \n    // Appending the svg canvas and moving it to the center of the screen according to D3 Margin Convention\n    vis.g = d3.select(element)\n      .append(\"svg\")\n        .attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n        .attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n    \n\n    // x and y scales - domain corresponds to input values from the data, and range corresponds to output that the scale gives back (in pixels)\n    vis.x = d3.scaleLinear()\n      .range([0, WIDTH])\n    \n    vis.y = d3.scaleLinear()\n      .range([HEIGHT, 0])\n\n    \n    // axis generators\n    vis.xAxisGroup = vis.g.append(\"g\")\n      .attr(\"transform\", `translate(0, ${HEIGHT})`)\n    vis.yAxisGroup = vis.g.append(\"g\")\n\n\n    // Axis labels\n    vis.g.append(\"text\")\n      .attr(\"x\", WIDTH / 2)\n      .attr(\"y\", HEIGHT + 40)\n      .attr(\"font-size\", 20)\n      .attr(\"text-anchor\", \"middle\")\n      .text(\"Age\")\n\n    vis.g.append(\"text\")\n      .attr(\"x\", -(HEIGHT / 2) )\n      .attr(\"y\", -50)\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"font-size\", 20)\n      .attr(\"text-anchor\", \"middle\")\n      .text(\"Height in cm\")\n\n\n    vis.update(data)\n  }\n  update(data) {\n    let vis = this;\n    vis.data = data;  // save the data variable to the D3Chart object instance\n\n    vis.x.domain([0, d3.max(vis.data, d => Number(d.age))]);\n    vis.y.domain([0, d3.max(vis.data, d => Number(d.height))]);\n\n    const xAxisCall = d3.axisBottom(vis.x);\n    const yAxisCall = d3.axisLeft(vis.y);\n\n    vis.xAxisGroup.transition().duration(500).call(xAxisCall)\n    vis.yAxisGroup.transition().duration(500).call(yAxisCall)\n\n    // Create/Update a small circle for every item in the data array. Here's the general D3 update pattern:\n    // 1. Data Join - selectAll() matching elements on the screen and update the data array\n    const circles = vis.g.selectAll(\"circle\")\n      .data(vis.data, d => d.name);\n\n    // 2. Exit - remove() any old elements from the screen that don't exist in the new data array\n    circles.exit()\n      .transition().duration(500)  // anything after the .transition is what we want to gradually see a change in\n        .attr(\"cy\", vis.y(0))\n        .remove();\n\n    // 3. Update - Update the elements that still exist in the new data as well as the screen (e.g. elements moved)\n    circles.transition().duration(500)\n      .attr(\"cx\", d => vis.x(d.age))\n      .attr(\"cy\", d => vis.y(d.height))\n\n    // 4. Enter - Add the new elements which exist in the new data, but not on the screen\n    circles.enter().append(\"circle\")\n      .attr(\"cy\", vis.y(0))\n      .attr(\"cx\", d => vis.x(d.age))\n      .attr(\"r\", 5)\n      .attr(\"fill\", \"blue\")\n      .on(\"click\", d => vis.updateName(d.name))\n      .transition().duration(500)\n        .attr(\"cy\", d => vis.y(d.height));\n  }\n}\n\nexport default D3Chart;","import React from \"react\";\nimport D3Chart from \"./D3Chart.js\";\n\n// this class is the bridge between React code and D3 code\nclass ChartWrapper extends React.Component {\n  \n    // executes once as soon as the component is mounted to the screen\n  componentDidMount() {\n    // refers to the ref in the div\n    this.setState({\n      chart: new D3Chart(this.refs.chart, this.props.data, this.props.updateName)\n    });\n  }\n\n  // allows to specify whether or not to render a react component when something changes\n  shouldComponentUpdate() {\n    // return false to disable the usual behaviour of React, stopping the component from automatically being re-rendered \n    return false;\n  }\n\n  // run as soon as new props become available for a component, but before any updates take place \n  componentWillReceiveProps(nextProps) {\n    this.state.chart.update(nextProps.data);\n  }\n\n  render() {\n    // An empty div, which we append a new D3Chart object to when a component first mounts\n    return <div className=\"chart-area\" ref=\"chart\" />;\n  }\n}\n\nexport default ChartWrapper;","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nclass Table extends React.Component {\n  state = {\n    name: \"\",\n    height: \"\",\n    age: \"\"\n  }\n  \n  handleSubmit = () => {\n    this.props.updateData([...this.props.data, this.state]);\n    this.setState({ name: \"\", hieght: \"\", age: \"\" });\n  }\n\n  handleChange = (event) => {\n    // square brackets to get the value of event.target.name\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleRemove = (event) => {\n    const newData = this.props.data.filter(d => {\n      return d.name !== event.target.name;\n    });\n    this.props.updateData(newData);\n  }\n\n  renderRows() {\n    return (\n      this.props.data.map(student => {\n        const background = student.name === this.props.activeName ? \"grey\" : \"white\";\n        return (\n          <Row key={student.name} style={{ marginTop: \"10px\", backgroundColor: background }}>\n            <Col xs={3}>{student.name}</Col>\n            <Col xs={3}>{student.height}</Col>\n            <Col xs={3}>{student.age}</Col>\n            <Col xs={3}>\n              <Button variant={\"danger\"} type={\"button\"} style={{ width: \"100%\" }} name={student.name} onClick={this.handleRemove}>\n                Remove\n              </Button>\n            </Col>\n          </Row>\n        )\n      })\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col xs={3}>\n            <Form.Control placeholder={\"Name\"} name={\"name\"} value={this.state.name} onChange={this.handleChange} />\n          </Col>\n          <Col xs={3}>\n            <Form.Control placeholder={\"Height\"} name={\"height\"} value={this.state.height} onChange={this.handleChange} />\n          </Col>\n          <Col xs={3}>\n            <Form.Control placeholder={\"Age\"} name={\"age\"} value={this.state.age} onChange={this.handleChange} />\n          </Col>\n\n          <Col>\n            <Button variant={\"primary\"} type={\"button\"} style={{ width: \"100%\" }} onClick={this.handleSubmit}>\n              Add\n            </Button>\n          </Col>\n        </Row>\n        {this.renderRows()}\n      </div>\n    );\n  }\n}\n\nexport default Table;","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nimport ChartWrapper from \"./ChartWrapper.js\";\nimport Table from \"./Table.js\";\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    activeName: null\n  }\n\n  componentWillMount() {\n    this.setState({data: [\n        {\"age\":\"10\",\"height\":\"152\",\"name\":\"Tony\"},\n        {\"age\":\"12\",\"height\":\"148\",\"name\":\"Jessica\"},\n        {\"age\":\"9\",\"height\":\"135\",\"name\":\"Andrew\"},\n        {\"age\":\"10\",\"height\":\"145\",\"name\":\"Emily\"},\n        {\"age\":\"11\",\"height\":\"141\",\"name\":\"Richard\"}]});\n    \n  }\n\n  updateName = (activeName) => {\n    this.setState({ activeName: activeName});\n  }\n\n  updateData = (data) => {\n    this.setState({ data: data });\n  }\n\n  renderChart() {\n    if (this.state.data.length === 0) {\n      return \"No data yet\"\n    }\n    return <ChartWrapper data={this.state.data} updateName={this.updateName} />\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\">\n          <Navbar.Brand>Student Height Scatterplot</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col md={6} xs={12}>{this.renderChart()}</Col>\n            <Col md={6} xs={12}><Table data={this.state.data} updateData={this.updateData} activeName={this.state.activeName}/></Col>\n          </Row> \n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}